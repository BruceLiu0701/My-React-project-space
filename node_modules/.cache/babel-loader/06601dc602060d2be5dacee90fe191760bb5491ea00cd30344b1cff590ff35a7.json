{"ast":null,"code":"import * as React from \"react\";\nimport { generate, getSecondaryColor, isIconDefinition, warning, useInsertStyles } from \"../utils\";\nconst twoToneColorPalette = {\n  primaryColor: \"#333\",\n  secondaryColor: \"#E6E6E6\",\n  calculated: false\n};\nfunction setTwoToneColors({\n  primaryColor,\n  secondaryColor\n}) {\n  twoToneColorPalette.primaryColor = primaryColor;\n  twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);\n  twoToneColorPalette.calculated = !!secondaryColor;\n}\nfunction getTwoToneColors() {\n  return {\n    ...twoToneColorPalette\n  };\n}\nconst IconBase = props => {\n  const {\n    icon,\n    className,\n    onClick,\n    style,\n    primaryColor,\n    secondaryColor,\n    ...restProps\n  } = props;\n  const svgRef = React.useRef();\n  let colors = twoToneColorPalette;\n  if (primaryColor) {\n    colors = {\n      primaryColor,\n      secondaryColor: secondaryColor || getSecondaryColor(primaryColor)\n    };\n  }\n  useInsertStyles(svgRef);\n  warning(isIconDefinition(icon), `icon should be icon definiton, but got ${icon}`);\n  if (!isIconDefinition(icon)) {\n    return null;\n  }\n  let target = icon;\n  if (target && typeof target.icon === \"function\") {\n    target = {\n      ...target,\n      icon: target.icon(colors.primaryColor, colors.secondaryColor)\n    };\n  }\n  return generate(target.icon, `svg-${target.name}`, {\n    className,\n    onClick,\n    style,\n    \"data-icon\": target.name,\n    width: \"1em\",\n    height: \"1em\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ...restProps,\n    ref: svgRef\n  });\n};\nIconBase.displayName = \"IconReact\";\nIconBase.getTwoToneColors = getTwoToneColors;\nIconBase.setTwoToneColors = setTwoToneColors;\nexport default IconBase;","map":{"version":3,"names":["React","generate","getSecondaryColor","isIconDefinition","warning","useInsertStyles","twoToneColorPalette","primaryColor","secondaryColor","calculated","setTwoToneColors","getTwoToneColors","IconBase","props","icon","className","onClick","style","restProps","svgRef","useRef","colors","target","name","width","height","fill","ref","displayName"],"sources":["C:/Users/88697/Desktop/react project/get_hired_project/node_modules/@ant-design/icons/es/components/IconBase.js"],"sourcesContent":["import * as React from \"react\";\nimport { generate, getSecondaryColor, isIconDefinition, warning, useInsertStyles } from \"../utils\";\nconst twoToneColorPalette = {\n    primaryColor: \"#333\",\n    secondaryColor: \"#E6E6E6\",\n    calculated: false\n};\nfunction setTwoToneColors({ primaryColor, secondaryColor }) {\n    twoToneColorPalette.primaryColor = primaryColor;\n    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);\n    twoToneColorPalette.calculated = !!secondaryColor;\n}\nfunction getTwoToneColors() {\n    return {\n        ...twoToneColorPalette\n    };\n}\nconst IconBase = (props)=>{\n    const { icon, className, onClick, style, primaryColor, secondaryColor, ...restProps } = props;\n    const svgRef = React.useRef();\n    let colors = twoToneColorPalette;\n    if (primaryColor) {\n        colors = {\n            primaryColor,\n            secondaryColor: secondaryColor || getSecondaryColor(primaryColor)\n        };\n    }\n    useInsertStyles(svgRef);\n    warning(isIconDefinition(icon), `icon should be icon definiton, but got ${icon}`);\n    if (!isIconDefinition(icon)) {\n        return null;\n    }\n    let target = icon;\n    if (target && typeof target.icon === \"function\") {\n        target = {\n            ...target,\n            icon: target.icon(colors.primaryColor, colors.secondaryColor)\n        };\n    }\n    return generate(target.icon, `svg-${target.name}`, {\n        className,\n        onClick,\n        style,\n        \"data-icon\": target.name,\n        width: \"1em\",\n        height: \"1em\",\n        fill: \"currentColor\",\n        \"aria-hidden\": \"true\",\n        ...restProps,\n        ref: svgRef\n    });\n};\nIconBase.displayName = \"IconReact\";\nIconBase.getTwoToneColors = getTwoToneColors;\nIconBase.setTwoToneColors = setTwoToneColors;\nexport default IconBase;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,OAAO,EAAEC,eAAe,QAAQ,UAAU;AAClG,MAAMC,mBAAmB,GAAG;EACxBC,YAAY,EAAE,MAAM;EACpBC,cAAc,EAAE,SAAS;EACzBC,UAAU,EAAE;AAChB,CAAC;AACD,SAASC,gBAAgBA,CAAC;EAAEH,YAAY;EAAEC;AAAe,CAAC,EAAE;EACxDF,mBAAmB,CAACC,YAAY,GAAGA,YAAY;EAC/CD,mBAAmB,CAACE,cAAc,GAAGA,cAAc,IAAIN,iBAAiB,CAACK,YAAY,CAAC;EACtFD,mBAAmB,CAACG,UAAU,GAAG,CAAC,CAACD,cAAc;AACrD;AACA,SAASG,gBAAgBA,CAAA,EAAG;EACxB,OAAO;IACH,GAAGL;EACP,CAAC;AACL;AACA,MAAMM,QAAQ,GAAIC,KAAK,IAAG;EACtB,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC,OAAO;IAAEC,KAAK;IAAEV,YAAY;IAAEC,cAAc;IAAE,GAAGU;EAAU,CAAC,GAAGL,KAAK;EAC7F,MAAMM,MAAM,GAAGnB,KAAK,CAACoB,MAAM,CAAC,CAAC;EAC7B,IAAIC,MAAM,GAAGf,mBAAmB;EAChC,IAAIC,YAAY,EAAE;IACdc,MAAM,GAAG;MACLd,YAAY;MACZC,cAAc,EAAEA,cAAc,IAAIN,iBAAiB,CAACK,YAAY;IACpE,CAAC;EACL;EACAF,eAAe,CAACc,MAAM,CAAC;EACvBf,OAAO,CAACD,gBAAgB,CAACW,IAAI,CAAC,EAAG,0CAAyCA,IAAK,EAAC,CAAC;EACjF,IAAI,CAACX,gBAAgB,CAACW,IAAI,CAAC,EAAE;IACzB,OAAO,IAAI;EACf;EACA,IAAIQ,MAAM,GAAGR,IAAI;EACjB,IAAIQ,MAAM,IAAI,OAAOA,MAAM,CAACR,IAAI,KAAK,UAAU,EAAE;IAC7CQ,MAAM,GAAG;MACL,GAAGA,MAAM;MACTR,IAAI,EAAEQ,MAAM,CAACR,IAAI,CAACO,MAAM,CAACd,YAAY,EAAEc,MAAM,CAACb,cAAc;IAChE,CAAC;EACL;EACA,OAAOP,QAAQ,CAACqB,MAAM,CAACR,IAAI,EAAG,OAAMQ,MAAM,CAACC,IAAK,EAAC,EAAE;IAC/CR,SAAS;IACTC,OAAO;IACPC,KAAK;IACL,WAAW,EAAEK,MAAM,CAACC,IAAI;IACxBC,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,cAAc;IACpB,aAAa,EAAE,MAAM;IACrB,GAAGR,SAAS;IACZS,GAAG,EAAER;EACT,CAAC,CAAC;AACN,CAAC;AACDP,QAAQ,CAACgB,WAAW,GAAG,WAAW;AAClChB,QAAQ,CAACD,gBAAgB,GAAGA,gBAAgB;AAC5CC,QAAQ,CAACF,gBAAgB,GAAGA,gBAAgB;AAC5C,eAAeE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}